
You are an AI agent tasked with building a secure and functional admin dashboard for the "Calcu Consulting" recruitment website. This dashboard will be used internally to manage job applications, client inquiries, and general contact messages submitted through the public-facing website.

The application should be built using Next.js, React, ShadCN UI, and Tailwind CSS, and it must interact with a Google Cloud Firestore database.

---

## 1. Firestore Database Structure

The public website writes data to three main collections in Firestore. The admin dashboard needs to read, display, and manage the documents within these collections.

### 1.1. `applications` collection
This collection stores job applications submitted by candidates.

**Document ID:** Auto-generated by Firestore.
**Document Fields:**
- `firstName` (string): The first name of the applicant (e.g., "John").
- `lastName` (string): The last name of the applicant (e.g., "Doe").
- `email` (string): The applicant's email address (e.g., "john.doe@example.com").
- `phone` (string): The applicant's phone number (e.g., "01234 567890").
- `jobType` (string): The job title the candidate applied for (e.g., "Chef de Partie").
- `location` (string): The applicant's location within London (e.g., "Central London").
- `submittedAt` (timestamp): The server timestamp of when the application was submitted.

### 1.2. `inquiries` collection
This collection stores inquiries from potential clients looking to fill positions.

**Document ID:** Auto-generated by Firestore.
**Document Fields:**
- `companyName` (string): The name of the client's company (e.g., "Your Company Inc.").
- `contactPerson` (string): The name of the person to contact (e.g., "John Doe").
- `email` (string): The client's email address (e.g., "john.doe@example.com").
- `phone` (string): The client's phone number (e.g., "01234 567890").
- `jobTitles` (array of strings): A list of job titles the client wants to fill (e.g., ["Chef de Partie", "Waiter/Waitress"]).
- `jobDescription` (string): A detailed description of the role.
- `requiredSkills` (string): A list of required skills for the position.
- `employmentType` (string): The type of employment ("permanent", "temporary", or "contract").
- `additionalInfo` (string, optional): Any extra details provided by the client.
- `submittedAt` (timestamp): The server timestamp of when the inquiry was submitted.

### 1.3. `contacts` collection
This collection stores general messages sent through the contact form.

**Document ID:** Auto-generated by Firestore.
**Document Fields:**
- `name` (string): The full name of the person who sent the message.
- `email` (string): The sender's email address.
- `phone` (string): The sender's phone number.
- `message` (string): The content of the message.
- `submittedAt` (timestamp): The server timestamp of when the message was submitted.

---

## 2. Admin Dashboard Requirements

The admin dashboard should have the following features:

- **Authentication:** A secure login system for administrators (e.g., Firebase Authentication with email/password). Only authenticated admins should be able to access the dashboard.
- **Dashboard Overview:** A main page that provides a summary of recent submissions (e.g., number of new applications, inquiries, and messages in the last 24 hours).
- **Manage Applications:** A dedicated section to view all job applications in a table. The table should be sortable and searchable. There should be a way to view the full details of each application and a button to delete it.
- **Manage Inquiries:** A section to view all client inquiries in a table with sort, search, and delete functionalities.
- **Manage Messages:** A section to view all contact messages in a table with sort, search, and delete functionalities.

---

## 3. Firestore Security Rules for Admin Dashboard

For the admin dashboard to function, you will need to implement specific Firestore security rules. These rules should **only allow authenticated administrators** to read, write, and delete data from the collections.

Here is an example of how you could structure these rules. You may need to adapt them based on how you implement admin user roles (e.g., using custom claims in Firebase Authentication).

```
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      // This assumes you have set a custom claim `admin: true` on the admin user's auth token.
      return request.auth.token.admin == true;
    }

    // Public website rules (for reference)
    match /applications/{docId} {
      allow create: if true; // Allows public submission
      allow read, update, delete: if isAdmin(); // Admins can manage
    }
    match /inquiries/{docId} {
      allow create: if true; // Allows public submission
      allow read, update, delete: if isAdmin(); // Admins can manage
    }
    match /contacts/{docId} {
      allow create: if true; // Allows public submission
      allow read, update, delete: if isAdmin(); // Admins can manage
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
```
**Important:** The public-facing website needs its `create` rule to remain `if true;` so that unauthenticated users can submit the forms. The admin rules add the necessary `read`, `update`, and `delete` permissions for authenticated admins.
